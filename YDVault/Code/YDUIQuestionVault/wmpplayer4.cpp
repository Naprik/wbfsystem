// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "wmpplayer4.h"

// Dispatch interfaces referenced by this interface


/////////////////////////////////////////////////////////////////////////////
// CWMPPlayer4

IMPLEMENT_DYNCREATE(CWMPPlayer4, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CWMPPlayer4 properties

/////////////////////////////////////////////////////////////////////////////
// CWMPPlayer4 operations

void CWMPPlayer4::close()
{
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CWMPPlayer4::GetUrl()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPPlayer4::SetUrl(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long CWMPPlayer4::GetOpenState()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPPlayer4::GetPlayState()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CWMPControls CWMPPlayer4::GetControls()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPControls(pDispatch);
}

CWMPSettings CWMPPlayer4::GetSettings()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPSettings(pDispatch);
}

CWMPMedia CWMPPlayer4::GetCurrentMedia()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPMedia(pDispatch);
}

void CWMPPlayer4::SetCurrentMedia(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CWMPMediaCollection CWMPPlayer4::GetMediaCollection()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPMediaCollection(pDispatch);
}

CWMPPlaylistCollection CWMPPlayer4::GetPlaylistCollection()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPPlaylistCollection(pDispatch);
}

CString CWMPPlayer4::GetVersionInfo()
{
	CString result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPPlayer4::launchURL(LPCTSTR bstrURL)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrURL);
}

CWMPNetwork CWMPPlayer4::GetNetwork()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPNetwork(pDispatch);
}

CWMPPlaylist CWMPPlayer4::GetCurrentPlaylist()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPPlaylist(pDispatch);
}

void CWMPPlayer4::SetCurrentPlaylist(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CWMPCdromCollection CWMPPlayer4::GetCdromCollection()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPCdromCollection(pDispatch);
}

CWMPClosedCaption CWMPPlayer4::GetClosedCaption()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPClosedCaption(pDispatch);
}

BOOL CWMPPlayer4::GetIsOnline()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

CWMPError CWMPPlayer4::GetError()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPError(pDispatch);
}

CString CWMPPlayer4::GetStatus()
{
	CString result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CWMPDVD CWMPPlayer4::GetDvd()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPDVD(pDispatch);
}

CWMPPlaylist CWMPPlayer4::newPlaylist(LPCTSTR bstrName, LPCTSTR bstrURL)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrName, bstrURL);
	return CWMPPlaylist(pDispatch);
}

CWMPMedia CWMPPlayer4::newMedia(LPCTSTR bstrURL)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrURL);
	return CWMPMedia(pDispatch);
}

BOOL CWMPPlayer4::GetEnabled()
{
	BOOL result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPPlayer4::SetEnabled(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWMPPlayer4::GetFullScreen()
{
	BOOL result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPPlayer4::SetFullScreen(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWMPPlayer4::GetEnableContextMenu()
{
	BOOL result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPPlayer4::SetEnableContextMenu(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void CWMPPlayer4::SetUiMode(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CWMPPlayer4::GetUiMode()
{
	CString result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CWMPPlayer4::GetStretchToFit()
{
	BOOL result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPPlayer4::SetStretchToFit(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWMPPlayer4::GetWindowlessVideo()
{
	BOOL result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPPlayer4::SetWindowlessVideo(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWMPPlayer4::GetIsRemote()
{
	BOOL result;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

CWMPPlayerApplication CWMPPlayer4::GetPlayerApplication()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPPlayerApplication(pDispatch);
}

void CWMPPlayer4::openPlayer(LPCTSTR bstrURL)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrURL);
}


//CWMPCdrom
CString CWMPCdrom::GetDriveSpecifier()
{
	CString result;
	InvokeHelper(0xfb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CWMPPlaylist CWMPCdrom::GetPlaylist()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xfc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPPlaylist(pDispatch);
}

void CWMPCdrom::eject()
{
	InvokeHelper(0xfd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CWMPCdromCollection::GetCount()
{
	long result;
	InvokeHelper(0x12d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CWMPCdrom CWMPCdromCollection::Item(long lIndex)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12e, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		lIndex);
	return CWMPCdrom(pDispatch);
}

CWMPCdrom CWMPCdromCollection::getByDriveSpecifier(LPCTSTR bstrDriveSpecifier)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x12f, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrDriveSpecifier);
	return CWMPCdrom(pDispatch);
}

BOOL CWMPControls::GetIsAvailable(LPCTSTR bstrItem)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		bstrItem);
	return result;
}

void CWMPControls::play()
{
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPControls::stop()
{
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPControls::pause()
{
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPControls::fastForward()
{
	InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPControls::fastReverse()
{
	InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

double CWMPControls::GetCurrentPosition()
{
	double result;
	InvokeHelper(0x38, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CWMPControls::SetCurrentPosition(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x38, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CString CWMPControls::GetCurrentPositionString()
{
	CString result;
	InvokeHelper(0x39, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPControls::next()
{
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPControls::previous()
{
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CWMPMedia CWMPControls::GetCurrentItem()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPMedia(pDispatch);
}

void CWMPControls::SetCurrentItem(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CWMPControls::GetCurrentMarker()
{
	long result;
	InvokeHelper(0x3d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWMPControls::SetCurrentMarker(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CWMPControls::playItem(LPDISPATCH pIWMPMedia)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pIWMPMedia);
}

BOOL CWMPDVD::GetIsAvailable(LPCTSTR bstrItem)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		bstrItem);
	return result;
}

CString CWMPDVD::GetDomain()
{
	CString result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPDVD::topMenu()
{
	InvokeHelper(0x3eb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPDVD::titleMenu()
{
	InvokeHelper(0x3ec, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPDVD::back()
{
	InvokeHelper(0x3ed, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPDVD::resume()
{
	InvokeHelper(0x3ee, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPError::clearErrorQueue()
{
	InvokeHelper(0x353, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CWMPError::GetErrorCount()
{
	long result;
	InvokeHelper(0x354, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CWMPErrorItem CWMPError::GetItem(long dwIndex)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x355, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		dwIndex);
	return CWMPErrorItem(pDispatch);
}

void CWMPError::webHelp()
{
	InvokeHelper(0x356, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}


long CWMPErrorItem::GetErrorCode()
{
	long result;
	InvokeHelper(0x385, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CWMPErrorItem::GetErrorDescription()
{
	CString result;
	InvokeHelper(0x386, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

VARIANT CWMPErrorItem::GetErrorContext()
{
	VARIANT result;
	InvokeHelper(0x387, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long CWMPErrorItem::GetRemedy()
{
	long result;
	InvokeHelper(0x388, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CWMPErrorItem::GetCustomUrl()
{
	CString result;
	InvokeHelper(0x389, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CWMPMedia::GetIsIdentical(LPDISPATCH pIWMPMedia)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2fb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		pIWMPMedia);
	return result;
}

CString CWMPMedia::GetSourceURL()
{
	CString result;
	InvokeHelper(0x2ef, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CWMPMedia::GetName()
{
	CString result;
	InvokeHelper(0x2fc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPMedia::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long CWMPMedia::GetImageSourceWidth()
{
	long result;
	InvokeHelper(0x2f0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPMedia::GetImageSourceHeight()
{
	long result;
	InvokeHelper(0x2f1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPMedia::GetMarkerCount()
{
	long result;
	InvokeHelper(0x2f2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

double CWMPMedia::getMarkerTime(long MarkerNum)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f3, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		MarkerNum);
	return result;
}

CString CWMPMedia::getMarkerName(long MarkerNum)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f4, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		MarkerNum);
	return result;
}

double CWMPMedia::GetDuration()
{
	double result;
	InvokeHelper(0x2f5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

CString CWMPMedia::GetDurationString()
{
	CString result;
	InvokeHelper(0x2f6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long CWMPMedia::GetAttributeCount()
{
	long result;
	InvokeHelper(0x2f7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CWMPMedia::getAttributeName(long lIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f8, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		lIndex);
	return result;
}

CString CWMPMedia::getItemInfo(LPCTSTR bstrItemName)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2f9, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		bstrItemName);
	return result;
}

void CWMPMedia::setItemInfo(LPCTSTR bstrItemName, LPCTSTR bstrVal)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2fa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrItemName, bstrVal);
}

CString CWMPMedia::getItemInfoByAtom(long lAtom)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2fd, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		lAtom);
	return result;
}

BOOL CWMPMedia::isMemberOf(LPDISPATCH pPlaylist)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2fe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPlaylist);
	return result;
}

BOOL CWMPMedia::isReadOnlyItem(LPCTSTR bstrItemName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrItemName);
	return result;
}

CWMPMedia CWMPMediaCollection::add(LPCTSTR bstrURL)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c4, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrURL);
	return CWMPMedia(pDispatch);
}

CWMPPlaylist CWMPMediaCollection::getAll()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1c5, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPPlaylist(pDispatch);
}

CWMPPlaylist CWMPMediaCollection::getByName(LPCTSTR bstrName)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c6, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrName);
	return CWMPPlaylist(pDispatch);
}

CWMPPlaylist CWMPMediaCollection::getByGenre(LPCTSTR bstrGenre)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c7, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrGenre);
	return CWMPPlaylist(pDispatch);
}

CWMPPlaylist CWMPMediaCollection::getByAuthor(LPCTSTR bstrAuthor)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c8, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrAuthor);
	return CWMPPlaylist(pDispatch);
}

CWMPPlaylist CWMPMediaCollection::getByAlbum(LPCTSTR bstrAlbum)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c9, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrAlbum);
	return CWMPPlaylist(pDispatch);
}

CWMPPlaylist CWMPMediaCollection::getByAttribute(LPCTSTR bstrAttribute, LPCTSTR bstrValue)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1ca, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrAttribute, bstrValue);
	return CWMPPlaylist(pDispatch);
}

void CWMPMediaCollection::remove(LPDISPATCH pItem, BOOL varfDeleteFile)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x1cb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pItem, varfDeleteFile);
}

CWMPStringCollection CWMPMediaCollection::getAttributeStringCollection(LPCTSTR bstrAttribute, LPCTSTR bstrMediaType)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1cd, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrAttribute, bstrMediaType);
	return CWMPStringCollection(pDispatch);
}

long CWMPMediaCollection::getMediaAtom(LPCTSTR bstrItemName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1d6, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bstrItemName);
	return result;
}

void CWMPMediaCollection::setDeleted(LPDISPATCH pItem, BOOL varfIsDeleted)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x1d7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pItem, varfIsDeleted);
}

BOOL CWMPMediaCollection::isDeleted(LPDISPATCH pItem)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pItem);
	return result;
}

long CWMPNetwork::GetBandWidth()
{
	long result;
	InvokeHelper(0x321, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetRecoveredPackets()
{
	long result;
	InvokeHelper(0x322, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CWMPNetwork::GetSourceProtocol()
{
	CString result;
	InvokeHelper(0x323, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetReceivedPackets()
{
	long result;
	InvokeHelper(0x324, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetLostPackets()
{
	long result;
	InvokeHelper(0x325, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetReceptionQuality()
{
	long result;
	InvokeHelper(0x326, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetBufferingCount()
{
	long result;
	InvokeHelper(0x327, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetBufferingProgress()
{
	long result;
	InvokeHelper(0x328, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetBufferingTime()
{
	long result;
	InvokeHelper(0x329, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWMPNetwork::SetBufferingTime(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x329, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CWMPNetwork::GetFrameRate()
{
	long result;
	InvokeHelper(0x32a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetMaxBitRate()
{
	long result;
	InvokeHelper(0x32b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetBitRate()
{
	long result;
	InvokeHelper(0x32c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::getProxySettings(LPCTSTR bstrProtocol)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x32d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bstrProtocol);
	return result;
}

void CWMPNetwork::setProxySettings(LPCTSTR bstrProtocol, long lProxySetting)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x32e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrProtocol, lProxySetting);
}

CString CWMPNetwork::getProxyName(LPCTSTR bstrProtocol)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x32f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		bstrProtocol);
	return result;
}

void CWMPNetwork::setProxyName(LPCTSTR bstrProtocol, LPCTSTR bstrProxyName)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x330, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrProtocol, bstrProxyName);
}

long CWMPNetwork::getProxyPort(LPCTSTR bstrProtocol)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x331, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bstrProtocol);
	return result;
}

void CWMPNetwork::setProxyPort(LPCTSTR bstrProtocol, long lProxyPort)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x332, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrProtocol, lProxyPort);
}

CString CWMPNetwork::getProxyExceptionList(LPCTSTR bstrProtocol)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x333, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		bstrProtocol);
	return result;
}

void CWMPNetwork::setProxyExceptionList(LPCTSTR bstrProtocol, LPCTSTR pbstrExceptionList)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x334, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrProtocol, pbstrExceptionList);
}

BOOL CWMPNetwork::getProxyBypassForLocal(LPCTSTR bstrProtocol)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x335, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrProtocol);
	return result;
}

void CWMPNetwork::setProxyBypassForLocal(LPCTSTR bstrProtocol, BOOL fBypassForLocal)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x336, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrProtocol, fBypassForLocal);
}

long CWMPNetwork::GetMaxBandwidth()
{
	long result;
	InvokeHelper(0x337, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWMPNetwork::SetMaxBandwidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x337, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CWMPNetwork::GetDownloadProgress()
{
	long result;
	InvokeHelper(0x338, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetEncodedFrameRate()
{
	long result;
	InvokeHelper(0x339, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CWMPNetwork::GetFramesSkipped()
{
	long result;
	InvokeHelper(0x33a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWMPPlayerApplication::switchToPlayerApplication()
{
	InvokeHelper(0x44d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPPlayerApplication::switchToControl()
{
	InvokeHelper(0x44e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CWMPPlayerApplication::GetPlayerDocked()
{
	BOOL result;
	InvokeHelper(0x44f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CWMPPlayerApplication::GetHasDisplay()
{
	BOOL result;
	InvokeHelper(0x450, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CWMPPlaylist::GetCount()
{
	long result;
	InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CWMPPlaylist::GetName()
{
	CString result;
	InvokeHelper(0xca, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPPlaylist::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long CWMPPlaylist::GetAttributeCount()
{
	long result;
	InvokeHelper(0xd2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CWMPPlaylist::GetAttributeName(long lIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		lIndex);
	return result;
}

CWMPMedia CWMPPlaylist::GetItem(long lIndex)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		lIndex);
	return CWMPMedia(pDispatch);
}

CString CWMPPlaylist::getItemInfo(LPCTSTR bstrName)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xcb, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		bstrName);
	return result;
}

void CWMPPlaylist::setItemInfo(LPCTSTR bstrName, LPCTSTR bstrValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrName, bstrValue);
}

BOOL CWMPPlaylist::GetIsIdentical(LPDISPATCH pIWMPPlaylist)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xd5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		pIWMPPlaylist);
	return result;
}

void CWMPPlaylist::clear()
{
	InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWMPPlaylist::insertItem(long lIndex, LPDISPATCH pIWMPMedia)
{
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lIndex, pIWMPMedia);
}

void CWMPPlaylist::appendItem(LPDISPATCH pIWMPMedia)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pIWMPMedia);
}

void CWMPPlaylist::removeItem(LPDISPATCH pIWMPMedia)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pIWMPMedia);
}

void CWMPPlaylist::moveItem(long lIndexOld, long lIndexNew)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lIndexOld, lIndexNew);
}

long CWMPPlaylistArray::GetCount()
{
	long result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CWMPPlaylist CWMPPlaylistArray::Item(long lIndex)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1f6, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		lIndex);
	return CWMPPlaylist(pDispatch);
}


CWMPPlaylist CWMPPlaylistCollection::newPlaylist(LPCTSTR bstrName)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x228, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrName);
	return CWMPPlaylist(pDispatch);
}

CWMPPlaylistArray CWMPPlaylistCollection::getAll()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x229, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWMPPlaylistArray(pDispatch);
}

CWMPPlaylistArray CWMPPlaylistCollection::getByName(LPCTSTR bstrName)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x22a, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		bstrName);
	return CWMPPlaylistArray(pDispatch);
}

void CWMPPlaylistCollection::remove(LPDISPATCH pItem)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x22c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pItem);
}

void CWMPPlaylistCollection::setDeleted(LPDISPATCH pItem, BOOL varfIsDeleted)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x230, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pItem, varfIsDeleted);
}

BOOL CWMPPlaylistCollection::isDeleted(LPDISPATCH pItem)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x231, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pItem);
	return result;
}

CWMPPlaylist CWMPPlaylistCollection::importPlaylist(LPDISPATCH pItem)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x232, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		pItem);
	return CWMPPlaylist(pDispatch);
}

BOOL CWMPSettings::GetIsAvailable(LPCTSTR bstrItem)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		bstrItem);
	return result;
}

BOOL CWMPSettings::GetAutoStart()
{
	BOOL result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetAutoStart(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CString CWMPSettings::GetBaseURL()
{
	CString result;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetBaseURL(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CWMPSettings::GetDefaultFrame()
{
	CString result;
	InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetDefaultFrame(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL CWMPSettings::GetInvokeURLs()
{
	BOOL result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetInvokeURLs(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CWMPSettings::GetMute()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetMute(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CWMPSettings::GetPlayCount()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetPlayCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double CWMPSettings::GetRate()
{
	double result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetRate(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CWMPSettings::GetBalance()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetBalance(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CWMPSettings::GetVolume()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetVolume(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CWMPSettings::getMode(LPCTSTR bstrMode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrMode);
	return result;
}

void CWMPSettings::setMode(LPCTSTR bstrMode, BOOL varfMode)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrMode, varfMode);
}

BOOL CWMPSettings::GetEnableErrorDialogs()
{
	BOOL result;
	InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CWMPSettings::SetEnableErrorDialogs(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x70, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CWMPStringCollection::GetCount()
{
	long result;
	InvokeHelper(0x191, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CWMPStringCollection::Item(long lIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x192, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		lIndex);
	return result;
}

CString CWMPClosedCaption::GetSAMIStyle()
{
	CString result;
	InvokeHelper(0x3b7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPClosedCaption::SetSAMIStyle(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lpszNewValue);
}

CString CWMPClosedCaption::GetSAMILang()
{
	CString result;
	InvokeHelper(0x3b8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPClosedCaption::SetSAMILang(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lpszNewValue);
}

CString CWMPClosedCaption::GetSAMIFileName()
{
	CString result;
	InvokeHelper(0x3b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPClosedCaption::SetSAMIFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lpszNewValue);
}

CString CWMPClosedCaption::GetCaptioningId()
{
	CString result;
	InvokeHelper(0x3ba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CWMPClosedCaption::SetCaptioningId(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lpszNewValue);
}

