#if !defined(AFX_WMPPLAYER4_H__583056B3_476D_4CD4_BCD0_A2022A677BD2__INCLUDED_)
#define AFX_WMPPLAYER4_H__583056B3_476D_4CD4_BCD0_A2022A677BD2__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CWMPControls;
class CWMPSettings;
class CWMPMedia;
class CWMPMediaCollection;
class CWMPPlaylistCollection;
class CWMPNetwork;
class CWMPPlaylist;
class CWMPCdromCollection;
class CWMPClosedCaption;
class CWMPError;
class CWMPDVD;
class CWMPPlayerApplication;
class CWMPErrorItem;
class CWMPStringCollection;
/////////////////////////////////////////////////////////////////////////////
// CWMPPlayer4 wrapper class

class CWMPPlayer4 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CWMPPlayer4)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x6bf52a52, 0x394a, 0x11d3, { 0xb1, 0x53, 0x0, 0xc0, 0x4f, 0x79, 0xfa, 0xa6 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	void close();
	CString GetUrl();
	void SetUrl(LPCTSTR lpszNewValue);
	long GetOpenState();
	long GetPlayState();
	CWMPControls GetControls();
	CWMPSettings GetSettings();
	CWMPMedia GetCurrentMedia();
	void SetCurrentMedia(LPDISPATCH newValue);
	CWMPMediaCollection GetMediaCollection();
	CWMPPlaylistCollection GetPlaylistCollection();
	CString GetVersionInfo();
	void launchURL(LPCTSTR bstrURL);
	CWMPNetwork GetNetwork();
	CWMPPlaylist GetCurrentPlaylist();
	void SetCurrentPlaylist(LPDISPATCH newValue);
	CWMPCdromCollection GetCdromCollection();
	CWMPClosedCaption GetClosedCaption();
	BOOL GetIsOnline();
	CWMPError GetError();
	CString GetStatus();
	CWMPDVD GetDvd();
	CWMPPlaylist newPlaylist(LPCTSTR bstrName, LPCTSTR bstrURL);
	CWMPMedia newMedia(LPCTSTR bstrURL);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	BOOL GetFullScreen();
	void SetFullScreen(BOOL bNewValue);
	BOOL GetEnableContextMenu();
	void SetEnableContextMenu(BOOL bNewValue);
	void SetUiMode(LPCTSTR lpszNewValue);
	CString GetUiMode();
	BOOL GetStretchToFit();
	void SetStretchToFit(BOOL bNewValue);
	BOOL GetWindowlessVideo();
	void SetWindowlessVideo(BOOL bNewValue);
	BOOL GetIsRemote();
	CWMPPlayerApplication GetPlayerApplication();
	void openPlayer(LPCTSTR bstrURL);
};

class CWMPCdrom : public COleDispatchDriver
{
public:
	CWMPCdrom() {}		// Calls COleDispatchDriver default constructor
	CWMPCdrom(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPCdrom(const CWMPCdrom& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	CString GetDriveSpecifier();
	CWMPPlaylist GetPlaylist();
	void eject();
};

class CWMPCdromCollection : public COleDispatchDriver
{
public:
	CWMPCdromCollection() {}		// Calls COleDispatchDriver default constructor
	CWMPCdromCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPCdromCollection(const CWMPCdromCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	long GetCount();
	CWMPCdrom Item(long lIndex);
	CWMPCdrom getByDriveSpecifier(LPCTSTR bstrDriveSpecifier);
};


class CWMPClosedCaption : public COleDispatchDriver
{
public:
	CWMPClosedCaption() {}		// Calls COleDispatchDriver default constructor
	CWMPClosedCaption(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPClosedCaption(const CWMPClosedCaption& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	CString GetSAMIStyle();
	void SetSAMIStyle(LPCTSTR lpszNewValue);
	CString GetSAMILang();
	void SetSAMILang(LPCTSTR lpszNewValue);
	CString GetSAMIFileName();
	void SetSAMIFileName(LPCTSTR lpszNewValue);
	CString GetCaptioningId();
	void SetCaptioningId(LPCTSTR lpszNewValue);
};



class CWMPControls : public COleDispatchDriver
{
public:
	CWMPControls() {}		// Calls COleDispatchDriver default constructor
	CWMPControls(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPControls(const CWMPControls& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	BOOL GetIsAvailable(LPCTSTR bstrItem);
	void play();
	void stop();
	void pause();
	void fastForward();
	void fastReverse();
	double GetCurrentPosition();
	void SetCurrentPosition(double newValue);
	CString GetCurrentPositionString();
	void next();
	void previous();
	CWMPMedia GetCurrentItem();
	void SetCurrentItem(LPDISPATCH newValue);
	long GetCurrentMarker();
	void SetCurrentMarker(long nNewValue);
	void playItem(LPDISPATCH pIWMPMedia);
};

class CWMPDVD : public COleDispatchDriver
{
public:
	CWMPDVD() {}		// Calls COleDispatchDriver default constructor
	CWMPDVD(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPDVD(const CWMPDVD& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	BOOL GetIsAvailable(LPCTSTR bstrItem);
	CString GetDomain();
	void topMenu();
	void titleMenu();
	void back();
	void resume();
};

class CWMPError : public COleDispatchDriver
{
public:
	CWMPError() {}		// Calls COleDispatchDriver default constructor
	CWMPError(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPError(const CWMPError& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	void clearErrorQueue();
	long GetErrorCount();
	CWMPErrorItem GetItem(long dwIndex);
	void webHelp();
};

class CWMPErrorItem : public COleDispatchDriver
{
public:
	CWMPErrorItem() {}		// Calls COleDispatchDriver default constructor
	CWMPErrorItem(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPErrorItem(const CWMPErrorItem& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	long GetErrorCode();
	CString GetErrorDescription();
	VARIANT GetErrorContext();
	long GetRemedy();
	CString GetCustomUrl();
};


class CWMPMedia : public COleDispatchDriver
{
public:
	CWMPMedia() {}		// Calls COleDispatchDriver default constructor
	CWMPMedia(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPMedia(const CWMPMedia& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	BOOL GetIsIdentical(LPDISPATCH pIWMPMedia);
	CString GetSourceURL();
	CString GetName();
	void SetName(LPCTSTR lpszNewValue);
	long GetImageSourceWidth();
	long GetImageSourceHeight();
	long GetMarkerCount();
	double getMarkerTime(long MarkerNum);
	CString getMarkerName(long MarkerNum);
	double GetDuration();
	CString GetDurationString();
	long GetAttributeCount();
	CString getAttributeName(long lIndex);
	CString getItemInfo(LPCTSTR bstrItemName);
	void setItemInfo(LPCTSTR bstrItemName, LPCTSTR bstrVal);
	CString getItemInfoByAtom(long lAtom);
	BOOL isMemberOf(LPDISPATCH pPlaylist);
	BOOL isReadOnlyItem(LPCTSTR bstrItemName);
};

class CWMPMediaCollection : public COleDispatchDriver
{
public:
	CWMPMediaCollection() {}		// Calls COleDispatchDriver default constructor
	CWMPMediaCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPMediaCollection(const CWMPMediaCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	CWMPMedia add(LPCTSTR bstrURL);
	CWMPPlaylist getAll();
	CWMPPlaylist getByName(LPCTSTR bstrName);
	CWMPPlaylist getByGenre(LPCTSTR bstrGenre);
	CWMPPlaylist getByAuthor(LPCTSTR bstrAuthor);
	CWMPPlaylist getByAlbum(LPCTSTR bstrAlbum);
	CWMPPlaylist getByAttribute(LPCTSTR bstrAttribute, LPCTSTR bstrValue);
	void remove(LPDISPATCH pItem, BOOL varfDeleteFile);
	CWMPStringCollection getAttributeStringCollection(LPCTSTR bstrAttribute, LPCTSTR bstrMediaType);
	long getMediaAtom(LPCTSTR bstrItemName);
	void setDeleted(LPDISPATCH pItem, BOOL varfIsDeleted);
	BOOL isDeleted(LPDISPATCH pItem);
};

class CWMPNetwork : public COleDispatchDriver
{
public:
	CWMPNetwork() {}		// Calls COleDispatchDriver default constructor
	CWMPNetwork(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPNetwork(const CWMPNetwork& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	long GetBandWidth();
	long GetRecoveredPackets();
	CString GetSourceProtocol();
	long GetReceivedPackets();
	long GetLostPackets();
	long GetReceptionQuality();
	long GetBufferingCount();
	long GetBufferingProgress();
	long GetBufferingTime();
	void SetBufferingTime(long nNewValue);
	long GetFrameRate();
	long GetMaxBitRate();
	long GetBitRate();
	long getProxySettings(LPCTSTR bstrProtocol);
	void setProxySettings(LPCTSTR bstrProtocol, long lProxySetting);
	CString getProxyName(LPCTSTR bstrProtocol);
	void setProxyName(LPCTSTR bstrProtocol, LPCTSTR bstrProxyName);
	long getProxyPort(LPCTSTR bstrProtocol);
	void setProxyPort(LPCTSTR bstrProtocol, long lProxyPort);
	CString getProxyExceptionList(LPCTSTR bstrProtocol);
	void setProxyExceptionList(LPCTSTR bstrProtocol, LPCTSTR pbstrExceptionList);
	BOOL getProxyBypassForLocal(LPCTSTR bstrProtocol);
	void setProxyBypassForLocal(LPCTSTR bstrProtocol, BOOL fBypassForLocal);
	long GetMaxBandwidth();
	void SetMaxBandwidth(long nNewValue);
	long GetDownloadProgress();
	long GetEncodedFrameRate();
	long GetFramesSkipped();
};

class CWMPPlayerApplication : public COleDispatchDriver
{
public:
	CWMPPlayerApplication() {}		// Calls COleDispatchDriver default constructor
	CWMPPlayerApplication(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPPlayerApplication(const CWMPPlayerApplication& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	void switchToPlayerApplication();
	void switchToControl();
	BOOL GetPlayerDocked();
	BOOL GetHasDisplay();
};

class CWMPPlaylist : public COleDispatchDriver
{
public:
	CWMPPlaylist() {}		// Calls COleDispatchDriver default constructor
	CWMPPlaylist(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPPlaylist(const CWMPPlaylist& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	long GetCount();
	CString GetName();
	void SetName(LPCTSTR lpszNewValue);
	long GetAttributeCount();
	CString GetAttributeName(long lIndex);
	CWMPMedia GetItem(long lIndex);
	CString getItemInfo(LPCTSTR bstrName);
	void setItemInfo(LPCTSTR bstrName, LPCTSTR bstrValue);
	BOOL GetIsIdentical(LPDISPATCH pIWMPPlaylist);
	void clear();
	void insertItem(long lIndex, LPDISPATCH pIWMPMedia);
	void appendItem(LPDISPATCH pIWMPMedia);
	void removeItem(LPDISPATCH pIWMPMedia);
	void moveItem(long lIndexOld, long lIndexNew);
};

class CWMPPlaylistArray : public COleDispatchDriver
{
public:
	CWMPPlaylistArray() {}		// Calls COleDispatchDriver default constructor
	CWMPPlaylistArray(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPPlaylistArray(const CWMPPlaylistArray& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	long GetCount();
	CWMPPlaylist Item(long lIndex);
};

class CWMPPlaylistCollection : public COleDispatchDriver
{
public:
	CWMPPlaylistCollection() {}		// Calls COleDispatchDriver default constructor
	CWMPPlaylistCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPPlaylistCollection(const CWMPPlaylistCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	CWMPPlaylist newPlaylist(LPCTSTR bstrName);
	CWMPPlaylistArray getAll();
	CWMPPlaylistArray getByName(LPCTSTR bstrName);
	void remove(LPDISPATCH pItem);
	void setDeleted(LPDISPATCH pItem, BOOL varfIsDeleted);
	BOOL isDeleted(LPDISPATCH pItem);
	CWMPPlaylist importPlaylist(LPDISPATCH pItem);
};

class CWMPSettings : public COleDispatchDriver
{
public:
	CWMPSettings() {}		// Calls COleDispatchDriver default constructor
	CWMPSettings(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPSettings(const CWMPSettings& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	BOOL GetIsAvailable(LPCTSTR bstrItem);
	BOOL GetAutoStart();
	void SetAutoStart(BOOL bNewValue);
	CString GetBaseURL();
	void SetBaseURL(LPCTSTR lpszNewValue);
	CString GetDefaultFrame();
	void SetDefaultFrame(LPCTSTR lpszNewValue);
	BOOL GetInvokeURLs();
	void SetInvokeURLs(BOOL bNewValue);
	BOOL GetMute();
	void SetMute(BOOL bNewValue);
	long GetPlayCount();
	void SetPlayCount(long nNewValue);
	double GetRate();
	void SetRate(double newValue);
	long GetBalance();
	void SetBalance(long nNewValue);
	long GetVolume();
	void SetVolume(long nNewValue);
	BOOL getMode(LPCTSTR bstrMode);
	void setMode(LPCTSTR bstrMode, BOOL varfMode);
	BOOL GetEnableErrorDialogs();
	void SetEnableErrorDialogs(BOOL bNewValue);
};

class CWMPStringCollection : public COleDispatchDriver
{
public:
	CWMPStringCollection() {}		// Calls COleDispatchDriver default constructor
	CWMPStringCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CWMPStringCollection(const CWMPStringCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	long GetCount();
	CString Item(long lIndex);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_WMPPLAYER4_H__583056B3_476D_4CD4_BCD0_A2022A677BD2__INCLUDED_)
